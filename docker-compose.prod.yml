version: "3.9"

services:
  redis:
    image: redis:alpine
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis_data:/var/lib/redis/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:17
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3

  http-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.http-server
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ACCESS_TOKEN_EXPIRES_IN=${ACCESS_TOKEN_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
    ports:
      - 8000:8000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    command: ["pnpm", "run", "http-backend:start"]

  ws-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.ws-server
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ACCESS_TOKEN_EXPIRES_IN=${ACCESS_TOKEN_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
    ports:
      - 8080:8080
    restart: always
    depends_on:
      http-server:
        condition: service_started
      redis:
        condition: service_healthy
    command: ["pnpm", "run", "ws-backend:start"]

  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["pnpm", "run", "worker:start"]

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_HTTP_URL=${NEXT_PUBLIC_HTTP_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
    ports:
      - 3000:3000
    restart: always
    depends_on:
      - http-server
      - ws-server
    command: ["pnpm", "run", "web:start"]

volumes:
  postgres_data:
  redis_data:
